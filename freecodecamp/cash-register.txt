function checkCashRegister(price, cash, cid) {
  const denoValues = {"ONE HUNDRED": 10000, "TWENTY": 2000, "TEN": 1000, "FIVE": 500, "ONE": 100, "QUARTER": 25, "DIME": 10, "NICKEL": 5, "PENNY": 1}
  //I'm gonna lose my mind
  const toIntegers = cid.map((denoms) => denoms.slice());
  for (let i = 0; i < cid.length; i++) {
    toIntegers[i][1] = Math.round(toIntegers[i][1] * 100);
  }

  const inventory = toIntegers.map((denoms) => denoms.slice()).reverse();
  let registerTotal = toIntegers.reduce((a,b) => { return a + b[1];}, 0);
  let owedChange = (cash - price)*100;
  const openArr = [];

  for (let i = 0; i < inventory.length; i++) {
    const type = inventory[i][0];
    let track = [inventory[i][0], 0];
    while (denoValues[type] <= owedChange && inventory[i][1] >= denoValues[type]) {
      owedChange -= denoValues[type];
      inventory[i][1] -= denoValues[type];
      registerTotal -= denoValues[type];
      track[1] += denoValues[type];
    }
    if (track[1] > 0) {
      track[1] = track[1] / 100;
      openArr.push(track);
    }
}
  if (owedChange == 0) {
    if (registerTotal == 0) {
      return {status: "CLOSED", change: cid};
    }
    return {status: "OPEN", change: openArr};
  } else {
    return {status: "INSUFFICIENT_FUNDS", change: []};
  }
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]])

//Make value table for each currency denomination
//Find out about horrors of floating-point arithmetics, swap to *100 integers
//Create deep array copies to work off of
//Keep track of currently owed change, rework the algorithm I created for the Roman Numeral Calculator based around subtraction of current value using highest valid number from set options (100,50,20 etc). If number is larger than current value, go to next largest number until you find one which is equal or less than current value.
//Subtract that value X amount of times from inventory, owed change & register total - add the same value to a tracking number. When number is no longer valid push used denominator and total tracked amount (/100) to array for use with OPEN status returns, move to next largest number and repeat.
//Return closed if owedChange is 0 && register is empty
//Return open is owedChange is 0 && register has contents
//Return insufficient if owedChange is greater than 0 (implicit if not enough change, or not correct combination of change)
//Probably could do totals check right off the bat to prevent execution of code for no reason when cash register has less change than what needs to be given.

//Respectfully, fuck floats

//==MGSIMARD==