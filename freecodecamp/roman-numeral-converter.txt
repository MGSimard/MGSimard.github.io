function convertToRoman(num) {
  const dictionaryN = [1000,900,500,400,100,90,50,40,10,9,5,4,1];
  const dictionaryR = ["M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"];
  const result = [];

  let currentRemainder = num;

  while (currentRemainder > 0) {
    for (let i = 0; i < dictionaryN.length; i++) {
      if (dictionaryN[i] <= currentRemainder) {
        console.log("Start result: " + result);
        console.log("Lowest Subtractor found: " + dictionaryN[i]);
        result.push(dictionaryR[i]);
        console.log("New Result: " + result);
        currentRemainder -= dictionaryN[i];
        console.log("New Remainder: " + currentRemainder)
        break;
      }
    }
  }
  return result.join("");
}

convertToRoman(7698);

//Highest possible subtractor without reducing to 0 and push letter one by one?
//nested iteration to find highest subtractor, highest to lowest stop at first valid
//I'm tired
//Object containers sucked, swapped to dual array

//ex 1598
//highest subtractor (1000) > 1598-1000=598 > push M (M)
//highest subtractor (500) > 598-500=98 > push D (MD)
//highest subtractor (XC) > 98-90=8 > push XC (MDXC)
//highest subtractor (V) > 8-5=3 > push V > (MDXCV)
//highest subtractor (I) > 3-1=2 > push I > (MDXCVI)
//highest subtractor (I) > 2-1=1 > push I > (MDXCVII)
//highest subtractor (1) > 1-1=0 > push I > (MDXCVII)
//Should work?
//We won't talk about numbers above 4k that's private

//==MGSIMARD==